!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=1)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={deltaTime:.016,objects:[],layers:[],gravity:.5,addCanvas:function(e,t,n){var r=document.createElement("canvas");n&&(r.id=n),r.width=e,r.height=t},addObject:function(e){console.log(e),this.objects.push(e)},render:function(){for(var e=this,t=0;t<this.objects.length;t++)this.objects[t].render();window.requestAnimationFrame((function(){e.render()}))}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),o=n(0);window.onload=function(){var e=document.getElementById("c");e.width=screen.width/2,e.height=screen.height/1.5;var t=e.getContext("2d");new r.default(30,40,20,20,t,100);o.default.render()}},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),s=n(4),c=n(0),u=function(e){function t(t,n,r,o,i,s){var c=e.call(this,t,n,i)||this;return c.w=r,c.h=o,c.life=s,c.speed_x=0,c.speed_y=0,window.addEventListener("keydown",(function(e){c.handleKeyDown(e)})),window.addEventListener("keyup",(function(e){c.handleKeyUp(e)})),c}return o(t,e),t.prototype.handleKeyDown=function(e){e&&s.default.eventHanlderDown(e,this)},t.prototype.handleKeyUp=function(e){e&&s.default.eventHanlderUp(e,this)},t.prototype.render=function(){s.default.clearRect(this.x,this.y,this.w,this.h,this.ctx),this.move(this.speed_x*c.default.gravity,this.speed_y*c.default.gravity),console.log(this.x,this.y),s.default.drawRect(this.x,this.y,this.w,this.h,this.ctx,"black")},t}(i.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e,t,n){this.x=e,this.y=t,this.ctx=n,r.default.addObject(this)}return e.prototype.move=function(e,t){this.x+=e,this.y-=t},e.prototype.addSprite=function(e){this.sprite=e},e.prototype.getPosition=function(){return{x:this.x,y:this.y}},e.prototype.render=function(){},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={eventHanlderDown:function(e,t){switch(e.key){case"ArrowUp":t.speed_x=0,t.speed_y=10;break;case"ArrowDown":t.speed_x=0,t.speed_y=-10;break;case"ArrowLeft":t.speed_x=-10,t.speed_y=0;break;case"ArrowRight":t.speed_x=10,t.speed_y=0}},eventHanlderUp:function(e,t){switch(e.key){case"ArrowUp":t.speed_y>0&&(t.speed_y=0);break;case"ArrowLeft":t.speed_x<0&&(t.speed_x=0);break;case"ArrowRight":t.speed_x>0&&(t.speed_x=0);break;case"ArrowDown":t.speed_y<0&&(t.speed_y=0)}},drawRect:function(e,t,n,r,o,i){null==i?o.fillRect(e,t,n,r):(o.fillStyle=i,o.fillRect(e,t,n,r))},clearRect:function(e,t,n,r,o){o.clearRect(e,t,n,r)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,